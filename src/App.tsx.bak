import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport Chat from './components/Chat.tsx';\nimport AdminPanel from './components/AdminPanel.tsx';\nimport logo from './logo.png';\nimport Icons from './components/icons';\n\n// Type definitions\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  avatar: string;\n  role: 'super_admin' | 'admin' | 'project_manager' | 'developer' | 'tester'| 'employees';\n  organization_id: string;\n  is_active: boolean;\n  created_at: string;\n  last_seen?: string;\n  is_online?: boolean;\n}\n\ninterface Organization {\n  id: string;\n  name: string;\n  domain: string;\n  plan: 'free' | 'pro' | 'enterprise';\n  user_count: number;\n  max_users: number;\n  created_at: string;\n}\n\ninterface Issue {\n  id: string;\n  key: string;\n  title: string;\n  description: string;\n  issue_type: 'STORY' | 'TASK' | 'BUG' | 'EPIC';\n  priority: 'HIGHEST' | 'HIGH' | 'MEDIUM' | 'LOW' | 'LOWEST';\n  status: 'TODO' | 'IN_PROGRESS' | 'REVIEW' | 'DONE';\n  assignee_id: string | null;\n  reporter_id: string;\n  story_points: number | null;\n  created_at: string;\n  updated_at: string;\n  labels: string[];\n  deadline?: string | null;\n  organization_id: string;\n  comments?: Comment[];\n}\n\ninterface Comment {\n  id: string;\n  content: string;\n  author_id: string;\n  issue_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface Notification {\n  id: string;\n  type: 'issue_created' | 'issue_updated' | 'issue_assigned' | 'comment_added' | 'status_changed' | 'user_joined';\n  title: string;\n  message: string;\n  read: boolean;\n  timestamp: string;\n  data?: any;\n}\n\ninterface ToastMessage {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n}\n\n// API Base URL\nconst API_BASE_URL = 'http://localhost:4000';\n\n// Toast notification component\nconst Toast: React.FC<{ toast: ToastMessage; onRemove: (id: string) => void }> = ({ toast, onRemove }) => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onRemove(toast.id);\n    }, toast.duration || 5000);\n    return () => clearTimeout(timer);\n  }, [toast.id, toast.duration, onRemove]);\n\n  const getToastColor = (type: ToastMessage['type']) => {\n    switch (type) {\n      case 'success': return '#36b37e';\n      case 'error': return '#ff5722';\n      case 'warning': return '#ffa500';\n      case 'info': return '#0052cc';\n    }\n  };\n\n  const getToastIcon = (type: ToastMessage['type']) => {\n    switch (type) {\n      case 'success': return Icons.success(18);\n      case 'error': return Icons.error(18);\n      case 'warning': return Icons.warning(18);\n      case 'info': return Icons.info(18);\n    }\n  };\n\n  return (\n    <div style={{\n      background: 'white',\n      border: `1px solid ${getToastColor(toast.type)}`,\n      borderLeft: `4px solid ${getToastColor(toast.type)}`,\n      borderRadius: '8px',\n      padding: '16px',\n      marginBottom: '12px',\n      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\n      display: 'flex',\n      alignItems: 'flex-start',\n      gap: '12px',\n      animation: 'slideIn 0.3s ease-out'\n    }}>\n      <span style={{ display: 'flex', alignItems: 'center', color: getToastColor(toast.type) }}>\n        {getToastIcon(toast.type)}\n      </span>\n      <div style={{ flex: 1 }}>\n        <div style={{ fontWeight: '600', color: '#172b4d', marginBottom: '4px' }}>\n          {toast.title}\n        </div>\n        <div style={{ color: '#6b778c', fontSize: '14px' }}>\n          {toast.message}\n        </div>\n      </div>\n      <button\n        onClick={() => onRemove(toast.id)}\n        style={{\n          background: 'none',\n          border: 'none',\n          color: '#6b778c',\n          cursor: 'pointer',\n          fontSize: '16px'\n        }}\n      >\r\n          {Icons.menu(20)}\r\n        </button>\n    </div>\n  );\n};\n\n// Toast container\nconst ToastContainer: React.FC<{ toasts: ToastMessage[]; onRemove: (id: string) => void }> = ({ toasts, onRemove }) => (\n  <div style={{\n    position: 'fixed',\n    top: '80px',\n    right: '20px',\n    zIndex: 2000,\n    maxWidth: '400px'\n  }}>\n    {toasts.map(toast => (\n      <Toast key={toast.id} toast={toast} onRemove={onRemove} />\n    ))}\n  </div>\n);\n\n// Notification panel component\n\n// Online users indicator\nconst OnlineUsersIndicator: React.FC<{ users: User[] }> = ({ users }) => {\n  const onlineUsers = users.filter(u => u.is_online);\n  \n  return (\n    <div style={{\n      display: 'flex',\n      alignItems: 'center',\n      gap: '8px',\n      background: 'rgba(255,255,255,0.1)',\n      padding: '8px 12px',\n      borderRadius: '20px'\n    }}>\n      <div style={{\n        width: '8px',\n        height: '8px',\n        borderRadius: '50%',\n        background: '#36b37e'\n      }} />\n      <span style={{ fontSize: '12px', color: 'white' }}>\n        {onlineUsers.length} online\n      </span>\n      <div style={{ display: 'flex', marginLeft: '4px' }}>\n        {onlineUsers.slice(0, 3).map(user => (\n          <div\n            key={user.id}\n            title={user.name}\n            style={{\n              width: '20px',\n              height: '20px',\n              borderRadius: '50%',\n              background: 'linear-gradient(135deg, #6554c0, #9575cd)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              fontSize: '8px',\n              fontWeight: '600',\n              color: 'white',\n              marginLeft: '-4px',\n              border: '2px solid white'\n            }}\n          >\n            {user.avatar}\n          </div>\n        ))}\n        {onlineUsers.length > 3 && (\n          <div style={{\n            width: '20px',\n            height: '20px',\n            borderRadius: '50%',\n            background: '#6b778c',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontSize: '8px',\n            fontWeight: '600',\n            color: 'white',\n            marginLeft: '-4px',\n            border: '2px solid white'\n          }}>\n            +{onlineUsers.length - 3}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Enhanced comment section with typing indicators\nconst CommentSection: React.FC<{\n  comments: Comment[];\n  users: User[];\n  onAddComment: (content: string) => Promise<void>;\n  currentUserId: string;\n}> = ({ comments, users, onAddComment, currentUserId }) => {\n  const [newComment, setNewComment] = useState('');\n  const typingUsers: string[] = [];\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const getUserById = (userId: string) => {\n    return users.find(u => u.id === userId);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newComment.trim() || isSubmitting) return;\n    \n    setIsSubmitting(true);\n    try {\n      await onAddComment(newComment.trim());\n      setNewComment('');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div style={{\n      background: 'white',\n      border: '1px solid #e1e5e9',\n      borderRadius: '8px',\n      padding: '16px',\n      marginTop: '16px'\n    }}>\n      <h4 style={{ margin: '0 0 16px 0', fontSize: '14px', color: '#172b4d' }}>\n        Comments ({comments.length})\n      </h4>\n      \n      <div style={{\n        maxHeight: '300px',\n        overflowY: 'auto',\n        marginBottom: '16px'\n      }}>\n        {comments.map(comment => {\n          const author = getUserById(comment.author_id);\n          return (\n            <div key={comment.id} style={{\n              display: 'flex',\n              gap: '12px',\n              marginBottom: '16px',\n              padding: '12px',\n              background: '#f8f9fa',\n              borderRadius: '8px'\n            }}>\n              <div style={{\n                width: '32px',\n                height: '32px',\n                borderRadius: '50%',\n                background: 'linear-gradient(135deg, #6554c0, #9575cd)',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontSize: '12px',\n                fontWeight: '600',\n                color: 'white',\n                flexShrink: 0\n              }}>\n                {author?.avatar || 'U'}\n              </div>\n              <div style={{ flex: 1 }}>\n                <div style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: '8px',\n                  marginBottom: '4px'\n                }}>\n                  <span style={{\n                    fontSize: '13px',\n                    fontWeight: '600',\n                    color: '#172b4d'\n                  }}>\n                    {author?.name || 'Unknown User'}\n                  </span>\n                  <span style={{\n                    fontSize: '11px',\n                    color: '#6b778c'\n                  }}>\n                    {new Date(comment.created_at).toLocaleString()}\n                  </span>\n                </div>\n                <div style={{\n                  fontSize: '13px',\n                  color: '#172b4d',\n                  lineHeight: '1.4'\n                }}>\n                  {comment.content}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {typingUsers.length > 0 && (\n        <div style={{\n          fontSize: '12px',\n          color: '#6b778c',\n          fontStyle: 'italic',\n          marginBottom: '12px',\n          display: 'flex',\n          alignItems: 'center',\n          gap: '8px'\n        }}>\n          <div style={{\n            display: 'flex',\n            gap: '2px'\n          }}>\n            <div style={{\n              width: '4px',\n              height: '4px',\n              borderRadius: '50%',\n              background: '#6b778c',\n              animation: 'typing 1.4s infinite ease-in-out'\n            }} />\n            <div style={{\n              width: '4px',\n              height: '4px',\n              borderRadius: '50%',\n              background: '#6b778c',\n              animation: 'typing 1.4s infinite ease-in-out 0.2s'\n            }} />\n            <div style={{\n              width: '4px',\n              height: '4px',\n              borderRadius: '50%',\n              background: '#6b778c',\n              animation: 'typing 1.4s infinite ease-in-out 0.4s'\n            }} />\n          </div>\n          {typingUsers.map(userId => getUserById(userId)?.name).join(', ')} typing...\n        </div>\n      )}\n      \n      <form onSubmit={handleSubmit}>\n        <div style={{\n          display: 'flex',\n          gap: '12px',\n          alignItems: 'flex-end'\n        }}>\n          <textarea\n            value={newComment}\n            onChange={(e) => setNewComment(e.target.value)}\n            placeholder="Add a comment..."\n            rows={3}\n            style={{\n              flex: 1,\n              padding: '12px',\n              border: '1px solid #dfe1e6',\n              borderRadius: '6px',\n              fontSize: '14px',\n              resize: 'vertical',\n              outline: 'none',\n              fontFamily: 'inherit'\n            }}\n          />\n          <button\n            type="submit"\n            disabled={!newComment.trim() || isSubmitting}\n            style={{\n              background: newComment.trim() && !isSubmitting ? '#0052cc' : '#ccc',\n              color: 'white',\n              border: 'none',\n              borderRadius: '6px',\n              padding: '12px 20px',\n              fontSize: '14px',\n              fontWeight: '600',\n              cursor: newComment.trim() && !isSubmitting ? 'pointer' : 'not-allowed',\n              whiteSpace: 'nowrap'\n            }}\n          >\n            {isSubmitting ? 'Posting...' : 'Comment'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\n// Main App Component\nconst App: React.FC = () => {\n  // THEME: Dark Blue\n  useEffect(() => {\n    const style = document.createElement('style');\n    style.id = 'dark-blue-theme';\n    style.textContent = `\n  :root{\n    --bg-start:#071739; --bg-mid:#0A1F4F; --bg-end:#0C275F;\n    --header-start:#0A1F4F; --header-end:#153E75;\n    --surface:#0f172a; --surface-2:#111827; --border:#1f2937; --text:#e2e8f0; --muted:#94a3b8;\n    --primary:#1d4ed8; --primary-2:#2563eb; --accent:#0ea5e9;\n  }\n  body { background: linear-gradient(180deg, var(--bg-start) 0%, var(--bg-mid) 50%, var(--bg-end) 100%); color: var(--text); }\n  * { scrollbar-width: thin; scrollbar-color: var(--primary) transparent; }\n  ::-webkit-scrollbar { height: 8px; width: 8px; }\n  ::-webkit-scrollbar-thumb { background: var(--primary); border-radius: 8px; }\n\n  @keyframes slideIn {\n    from { transform: translateX(100%); opacity: 0; }\n    to { transform: translateX(0); opacity: 1; }\n  }\n\n  @keyframes typing {\n    0%, 60%, 100% { transform: translateY(0); }\n    30% { transform: translateY(-10px); }\n  }\n\n  @keyframes splashLift {\n    0% { transform: translateY(48px) scale(0.85); opacity: 0; }\n    60% { transform: translateY(-6px) scale(1.06); opacity: 1; }\n    100% { transform: translateY(0) scale(1); opacity: 1; }\n  }\n\n  @keyframes splashGlow {\n    0% { opacity: 0; }\n    30% { opacity: 1; }\n    70% { opacity: 1; }\n    100% { opacity: 0; }\n  }\n`;\n    document.head.appendChild(style);\n    return () => { const el=document.getElementById('dark-blue-theme'); if (el) el.remove(); };\n  }, []);\n\n  // View states\n  const [currentView, setCurrentView] = useState<'auth' | 'dashboard' | 'board' | 'admin'>('auth');\n  const [authMode, setAuthMode] = useState<'login' | 'signup' | 'verify-otp'>('login');\n  const [signupMode, setSignupMode] = useState<'create_org' | 'join_org'>('create_org');\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showIssueModal, setShowIssueModal] = useState(false);\n  const [selectedIssue, setSelectedIssue] = useState<Issue | null>(null);\n  const [showChat, setShowChat] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [showAccountMenu, setShowAccountMenu] = useState(false);\n  const [showNotificationsMenu, setShowNotificationsMenu] = useState(false);\n  const [showSplash, setShowSplash] = useState(true);\n  const [isAppElevated, setIsAppElevated] = useState(false);\n\n\n  useEffect(() => {\n    setIsAppElevated(false);\n    const timer = window.setTimeout(() => setIsAppElevated(true), 80);\n    return () => window.clearTimeout(timer);\n  }, [isAuthenticated, currentView]);\n\n  useEffect(() => {\n    if (!showAccountMenu && !showNotificationsMenu) {\n      return;\n    }\n\n    const handleClickAway = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      if (!target.closest('[data-header-menu]')) {\n        setShowAccountMenu(false);\n        setShowNotificationsMenu(false);\n      }\n    };\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setShowAccountMenu(false);\n        setShowNotificationsMenu(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickAway);\n    document.addEventListener('keydown', handleEscape);\n    return () => {\n      document.removeEventListener('click', handleClickAway);\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [showAccountMenu, showNotificationsMenu]);\n\n\n  // Auth states\n  const [user, setUser] = useState<User | null>(null);\n  const [organization, setOrganization] = useState<Organization | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [authError, setAuthError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [accessToken, setAccessToken] = useState('');\n  const canCreateIssue = useMemo(() => {\n    if (!user) {\n      return false;\n    }\n    return ['super_admin', 'admin', 'project_manager'].includes(user.role);\n  }, [user]);\n\n  const canAccessAdminPanel = user?.role === 'super_admin';\n\n  useEffect(() => {\n    let splashTimer: number | undefined;\n\n    if (!isAuthenticated) {\n      setShowSplash(true);\n      splashTimer = window.setTimeout(() => setShowSplash(false), 3200);\n    } else {\n      setShowSplash(false);\n    }\n\n    return () => {\n      if (splashTimer) {\n        window.clearTimeout(splashTimer);\n      }\n    };\n  }, [isAuthenticated]);\n\n  useEffect(() => {\n    if (currentView === 'admin' && !canAccessAdminPanel) {\n      setCurrentView('dashboard');\n    }\n  }, [currentView, canAccessAdminPanel]);\n\n  // Form states\n  const [loginForm, setLoginForm] = useState({ email: '', password: '' });\n  const [signupForm, setSignupForm] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    organization_name: ''\n  });\n  const [otpForm, setOtpForm] = useState({ otp: '', email: '' });\n\n  // Data states\n  const [users, setUsers] = useState<User[]>([]);\n  const [issues, setIssues] = useState<Issue[]>([]);\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  useEffect(() => {\n    if (showNotificationsMenu) {\n      setNotifications(prev => prev.map(note => note.read ? note : ({ ...note, read: true })));\n    }\n  }, [showNotificationsMenu, setNotifications]);\n\n  const [toasts, setToasts] = useState<ToastMessage[]>([]);\n  const [newIssue, setNewIssue] = useState({\n    title: '',\n    description: '',\n    issue_type: 'STORY' as Issue['issue_type'],\n    priority: 'MEDIUM' as Issue['priority'],\n    assignee_id: '',\n    story_points: 1,\n    labels: [] as string[],\n    deadline: ''\n  });\n\n  useEffect(() => {\n    const orgName = organization?.name?.trim();\n    const unreadCount = notifications.length;\n    const baseTitle = orgName ? `MissedTask - ${orgName}` : 'MissedTask';\n    document.title = unreadCount > 0 ? `(${unreadCount}) ${baseTitle}` : baseTitle;\n  }, [organization, notifications]);\n\n  // Refs for WebSocket\n  const wsRef = useRef<WebSocket | null>(null);\n\n  // Toast functions\n  const showToast = useCallback((type: ToastMessage['type'], title: string, message: string, duration?: number) => {\n    const toast: ToastMessage = {\n      id: Date.now().toString(),\n      type,\n      title,\n      message,\n      duration\n    };\n    setToasts(prev => [...prev, toast]);\n  }, []);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts(prev => prev.filter(t => t.id !== id));\n  }, []);\n\n  const handleInvalidSession = useCallback((reason?: string) => {\n    console.warn('?? Session invalidated. Forcing re-authentication.', reason);\n    if (wsRef.current) {\n      try {\n        wsRef.current.onclose = null as any;\n        wsRef.current.onerror = null;\n        wsRef.current.close();\n      } catch (closeError) {\n        console.warn('Failed to close WebSocket gracefully:', closeError);\n      }\n      wsRef.current = null;\n    }\n    setShowChat(false);\n    setIsAuthenticated(false);\n    setAccessToken('');\n    setUser(null);\n    setOrganization(null);\n    setUsers([]);\n    setIssues([]);\n    setNotifications([]);\n    setCurrentView('auth');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('user');\n    localStorage.removeItem('organization');\n    showToast('warning', 'Session Expired', reason || 'Please sign in again.');\n  }, [showToast]);\n\n  // Notification functions\n  const addNotification = useCallback((notification: Omit<Notification, 'id' | 'timestamp'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      id: Date.now().toString(),\n      timestamp: new Date().toISOString()\n    };\n    setNotifications(prev => [newNotification, ...prev.slice(0, 49)]); // Keep last 50\n  }, []);\n\n\n  // Enhanced API call helper with detailed logging\n  const apiCall = useCallback(async (endpoint: string, options: RequestInit = {}) => {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const method = options.method || 'GET';\n    \n    console.log('\n?? === API CALL START ===');\n    console.log('?? URL:', url);\n    console.log('?? Method:', method);\n    console.log('?? Options:', options);\n    \n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...options.headers as Record<string, string>,\n    };\n\n    if (accessToken) {\n      headers['Authorization'] = `Bearer ${accessToken}`;\n      console.log('?? Using access token:', accessToken.substring(0, 10) + '...');\n    } else {\n      console.log('?? No access token available');\n    }\n\n    console.log('?? Headers:', headers);\n    \n    if (options.body) {\n      console.log('?? Request body:', options.body);\n    }\n\n    try {\n      console.log('? Sending request...');\n      const startTime = Date.now();\n      \n      const response = await fetch(url, {\n        ...options,\n        headers,\n      });\n\n      const endTime = Date.now();\n      console.log('?? Request completed in:', endTime - startTime, 'ms');\n      console.log('?? Response status:', response.status, response.statusText);\n      console.log('?? Response headers:', Object.fromEntries(response.headers.entries()));\n\n\n      const data = await response.json();\n      console.log('? Success! Response data:', data);\n      console.log('?? === API CALL END ===\n');\n      return data;\n    } catch (error: any) {\n      console.error('?? === API CALL FAILED ===');\n      console.error('?? Error type:', error?.name);\n      console.error('?? Error message:', error?.message);\n      console.error('?? URL that failed:', url);\n      console.error('?? Method:', method);\n      \n      if ((error as any)?.status === 401) {\n        handleInvalidSession('Your session has expired. Please sign in again.');\n      }\n      \n      // Network-specific error logging\n      if (error?.name === 'TypeError' && String(error?.message || '').includes('fetch')) {\n        console.error('?? Network error detected:');\n        console.error('   - Backend server might not be running');\n        console.error('   - Wrong IP address or port');\n        console.error('   - CORS issues');\n        console.error('   - Firewall blocking connection');\n      }\n      \n      console.error('?? === API CALL END ===\n');\n      throw error;\n    }\n  }, [accessToken, handleInvalidSession]);\n\n  // Load functions\n  const loadIssues = useCallback(async (token: string) => {\n    console.log('?? Loading issues...');\n    try {\n      const issuesData = await apiCall('/api/issues', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      console.log('? Issues loaded successfully:', issuesData.length, 'issues');\n      setIssues(issuesData);\n    } catch (error: any) {\n      console.error('? Failed to load issues:', error);\n      if ((error as any)?.status === 401) {\n        return;\n      }\n      showToast('error', 'Loading Failed', 'Could not load issues');\n    }\n  }, [apiCall, showToast]);\n\n  const loadUsers = useCallback(async (token: string) => {\n    console.log('?? Loading users...');\n    try {\n      const usersData = await apiCall('/api/users', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      console.log('? Users loaded successfully:', usersData.length, 'users');\n      setUsers(usersData);\n    } catch (error: any) {\n      console.error('? Failed to load users:', error);\n      if ((error as any)?.status === 401) {\n        return;\n      }\n      showToast('error', 'Loading Failed', 'Could not load users');\n    }\n  }, [apiCall, showToast]);\n\n  // WebSocket connection\n  const connectWebSocket = useCallback(() => {\n    if (!accessToken) return;\n\n    const wsUrl = `ws://localhost:4000/ws/${accessToken}`;\n    try {\n      if (wsRef.current) {\n        wsRef.current.onclose = null as any;\n        wsRef.current.onerror = null;\n        wsRef.current.close();\n      }\n    } catch (cleanupError) {\n      console.warn('Failed to cleanup previous WebSocket:', cleanupError);\n    }\n\n    wsRef.current = new WebSocket(wsUrl);\n\n    wsRef.current.onopen = () => {\n      console.log('?? WebSocket connected');\n      showToast('success', 'Connected', 'Real-time updates enabled');\n    };\n\n    wsRef.current.onerror = (event) => {\n      console.error('?? WebSocket error:', event);\n    };\n\n    wsRef.current.onclose = (event) => {\n      console.log('?? WebSocket disconnected', event.code, event.reason);\n      const reasonText = (event.reason || '').toLowerCase();\n      if (event.code === 1008 || event.code === 4001 || event.code === 4403 || reasonText.includes('invalid')) {\n        handleInvalidSession('Real-time connection was rejected. Please sign in again.');\n        return;\n      }\n      showToast('warning', 'Disconnected', 'Real-time updates disabled');\n      setTimeout(() => {\n        if (accessToken) {\n          connectWebSocket();\n        }\n      }, 5000);\n    };\n\n    wsRef.current.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('?? WebSocket message:', data);\n        \n        switch (data.type) {\n          case 'user_update':\n            setUsers(prev => prev.map(u => \n              u.id === data.user.id ? { ...data.user, is_online: true } : u\n            ));\n            break;\n            \n          case 'issue_update':\n            setIssues(prev => prev.map(i => \n              i.id === data.issue.id ? data.issue : i\n            ));\n            addNotification({\n              type: 'issue_updated',\n              title: 'Issue Updated',\n              message: `${data.issue.key} has been updated`,\n              read: false,\n              data: data.issue\n            });\n            showToast('info', 'Issue Updated', `${data.issue.key}: ${data.issue.title}`);\n            break;\n            \n          case 'new_issue':\n            setIssues(prev => [data.issue, ...prev]);\n            addNotification({\n              type: 'issue_created',\n              title: 'New Issue Created',\n              message: `${data.issue.key}: ${data.issue.title}`,\n              read: false,\n              data: data.issue\n            });\n            showToast('success', 'New Issue', `${data.issue.key} created`);\n            break;\n            \n          case 'new_comment':\n            setIssues(prev => prev.map(issue => \n              issue.id === data.comment.issue_id \n                ? { ...issue, comments: [...(issue.comments || []), data.comment] }\n                : issue\n            ));\n            addNotification({\n              type: 'comment_added',\n              title: 'New Comment',\n              message: `Comment added to ${data.issue_key}`,\n              read: false,\n              data: data.comment\n            });\n            break;\n            \n          case 'user_joined':\n            addNotification({\n              type: 'user_joined',\n              title: 'User Joined',\n              message: `${data.user.name} joined the organization`,\n              read: false,\n              data: data.user\n            });\n            showToast('info', 'New Team Member', `${data.user.name} joined your organization`);\n            break;\n        }\n      } catch (error) {\n        console.error('? WebSocket message parse error:', error);\n      }\n    };\n  }, [accessToken, handleInvalidSession, showToast, addNotification, canCreateIssue]);\n\n  // Load saved session on app start\n  useEffect(() => {\n    const initializeApp = async () => {\n      console.log('?? App starting up...');\n      console.log('?? API Base URL:', API_BASE_URL);\n      \n      const savedToken = localStorage.getItem('accessToken');\n      const savedUser = localStorage.getItem('user');\n      const savedOrg = localStorage.getItem('organization');\n      \n      console.log('?? Checking saved session...');\n      console.log('Token exists:', !!savedToken);\n      console.log('User exists:', !!savedUser);\n      console.log('Org exists:', !!savedOrg);\n      \n      if (savedToken && savedUser && savedOrg) {\n        try {\n          const parsedUser = JSON.parse(savedUser);\n          const parsedOrg = JSON.parse(savedOrg);\n          \n          console.log('? Restoring session for user:', parsedUser.email);\n          \n          setAccessToken(savedToken);\n          setUser(parsedUser);\n          setOrganization(parsedOrg);\n          setIsAuthenticated(true);\n          setCurrentView('dashboard');\n          \n          // Load data\n          await loadIssues(savedToken);\n          await loadUsers(savedToken);\n        } catch (error) {\n          console.error('? Error parsing saved session:', error);\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('user');\n          localStorage.removeItem('organization');\n        }\n      } else {\n        console.log('?? No saved session found, showing auth screen');\n      }\n    };\n\n    initializeApp();\n  }, [loadIssues, loadUsers]);\n\n  // Separate useEffect for WebSocket connection\n  useEffect(() => {\n    if (accessToken && isAuthenticated) {\n      connectWebSocket();\n    }\n  }, [accessToken, isAuthenticated, connectWebSocket]);\n\n  // Enhanced auth functions with logging\n  const login = useCallback(async (email: string, password: string): Promise<boolean> => {\n    console.log('\n?? === LOGIN ATTEMPT ===');\n    console.log('?? Email:', email);\n    console.log('?? Password length:', password.length);\n    \n    setIsLoading(true);\n    setAuthError('');\n\n    try {\n      const data = await apiCall('/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify({ email, password }),\n      });\n\n      console.log('? Login successful!');\n      console.log('?? User data:', data.user);\n      console.log('?? Organization:', data.organization);\n      console.log('?? Access token received:', data.access_token.substring(0, 10) + '...');\n\n      setUser(data.user);\n      setOrganization(data.organization);\n      setAccessToken(data.access_token);\n      setIsAuthenticated(true);\n      \n      // Store session\n      localStorage.setItem('accessToken', data.access_token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      localStorage.setItem('organization', JSON.stringify(data.organization));\n      \n      console.log('?? Session saved to localStorage');\n      \n      setCurrentView('dashboard');\n      \n      // Load data\n      await loadIssues(data.access_token);\n      await loadUsers(data.access_token);\n      \n      showToast('success', 'Welcome Back!', `Logged in as ${data.user.name}`);\n      \n      setIsLoading(false);\n      console.log('?? === LOGIN COMPLETE ===\n');\n      return true;\n    } catch (error: any) {\n      console.error('? Login failed:', error.message);\n      setAuthError(error.message || 'Login failed');\n      showToast('error', 'Login Failed', error.message || 'Invalid credentials');\n      setIsLoading(false);\n      return false;\n    }\n  }, [apiCall, loadIssues, loadUsers, showToast]);\n\n  const signup = useCallback(async () => {\n    setIsLoading(true);\n    setAuthError('');\n\n    if (signupMode === 'create_org') {\n      if (signupForm.password !== signupForm.confirmPassword) {\n        setAuthError('Passwords do not match');\n        showToast('error', 'Signup Failed', 'Passwords do not match');\n        setIsLoading(false);\n        return;\n      }\n      try {\n        const requestBody = {\n          email: signupForm.email,\n          password: signupForm.password,\n          name: signupForm.name,\n          organization_name: signupForm.organization_name\n        };\n        await apiCall('/api/auth/signup', { method: 'POST', body: JSON.stringify(requestBody) });\n        setOtpForm({ ...otpForm, email: signupForm.email });\n        setAuthMode('verify-otp');\n        showToast('info', 'Verification Required', 'Check backend console for the OTP code');\n      } catch (error: any) {\n        setAuthError(error.message || 'Signup failed');\n        showToast('error', 'Signup Failed', error.message || 'Account creation failed');\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      try {\n        const requestBody = {\n          email: signupForm.email,\n          password: signupForm.password,\n          name: signupForm.name\n        };\n        await apiCall('/api/auth/signup-member', { method: 'POST', body: JSON.stringify(requestBody) });\n        setOtpForm({ ...otpForm, email: signupForm.email });\n        setAuthMode('verify-otp');\n        showToast('info', 'Verification Required', 'Check backend console for the OTP code');\n      } catch (error: any) {\n        setAuthError(error.message || 'Signup failed');\n        showToast('error', 'Signup Failed', error.message || 'Signup to existing org failed');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }, [signupMode, signupForm, apiCall, otpForm, showToast]);\n      \n  const verifyOTP = useCallback(async () => {\n    setIsLoading(true);\n    setAuthError('');\n    try {\n      const body = { email: otpForm.email, otp: otpForm.otp };\n      const endpoint = signupMode === 'create_org' ? '/api/auth/verify-otp' : '/api/auth/verify-otp-member';\n      const data = await apiCall(endpoint, { method: 'POST', body: JSON.stringify(body) });\n\n      setAccessToken(data.access_token);\n      setUser(data.user);\n      setOrganization(data.organization);\n      setIsAuthenticated(true);\n      setCurrentView('dashboard');\n      loadIssues(data.access_token);\n      loadUsers(data.access_token);\n      showToast('success', 'Welcome!', `Logged in as ${data.user.name}`);\n    } catch (error: any) {\n      setAuthError(error.message || 'Verification failed');\n      showToast('error', 'Verification Failed', error.message || 'Invalid or expired code');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [otpForm, signupMode, apiCall, loadIssues, loadUsers, showToast]);\n\n  const logout = useCallback(async () => {\n    console.log('?? Logging out...');\n    setShowAccountMenu(false);\n    setShowNotificationsMenu(false);\n    \n    // Close WebSocket connection\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    \n    try {\n      await apiCall('/api/auth/logout', {\n        method: 'POST',\n        headers: { 'Authorization': `Bearer ${accessToken}` }\n      });\n      console.log('? Logout API call successful');\n    } catch (error) {\n      console.error('? Logout error:', error);\n    }\n\n    // Clear local state\n    setUser(null);\n    setOrganization(null);\n    setAccessToken('');\n    setIsAuthenticated(false);\n    setCurrentView('auth');\n    setAuthMode('login');\n    setIssues([]);\n    setUsers([]);\n    setNotifications([]);\n    setToasts([]);\n    \n    // Clear storage\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('user');\n    localStorage.removeItem('organization');\n    \n    showToast('info', 'Logged Out', 'See you next time!');\n    console.log('? Logout complete - all data cleared');\n  }, [apiCall, accessToken, showToast]);\n\n  const openCreateIssueModal = useCallback(() => {\n    if (!canCreateIssue) {\n      showToast('error', 'Permission Denied', 'You do not have access to create issues.');\n      return;\n    }\n    openCreateIssueModal();\n  }, [canCreateIssue, showToast]);\n\n  const createIssue = useCallback(async () => {\n    if (!canCreateIssue) {\n      showToast('error', 'Permission Denied', 'You do not have access to create issues.');\n      return;\n    }\n\n    if (!newIssue.title.trim()) {\n      console.error('? Cannot create issue: Title is empty');\n      showToast('error', 'Validation Error', 'Issue title is required');\n      return;\n    }\n    \n    console.log('?? Creating new issue:', newIssue.title);\n    \n    try {\n      const issueData = await apiCall('/api/issues', {\n        method: 'POST',\n        body: JSON.stringify({\n          title: newIssue.title,\n          description: newIssue.description,\n          issue_type: newIssue.issue_type,\n          priority: newIssue.priority,\n          assignee_id: newIssue.assignee_id || null,\n          story_points: newIssue.story_points,\n          labels: newIssue.labels,\n          deadline: newIssue.deadline || null\n        }),\n        headers: { 'Authorization': `Bearer ${accessToken}` }\n      });\n      \n      console.log('? Issue created successfully:', issueData.key);\n      setIssues(prev => [...prev, issueData]);\n      setNewIssue({ \n        title: '', \n        description: '', \n        issue_type: 'STORY', \n        priority: 'MEDIUM', \n        assignee_id: '', \n        story_points: 1,\n        labels: [],\n        deadline: ''\n      });\n      setShowCreateModal(false);\n      \n      showToast('success', 'Issue Created', `${issueData.key}: ${issueData.title}`);\n      \n      addNotification({\n        type: 'issue_created',\n        title: 'Issue Created',\n        message: `You created ${issueData.key}: ${issueData.title}`,\n        read: false,\n        data: issueData\n      });\n    } catch (error: any) {\n      console.error('? Failed to create issue:', error.message);\n      setAuthError(error.message || 'Failed to create issue');\n      showToast('error', 'Creation Failed', error.message || 'Could not create issue');\n    }\n  }, [newIssue, apiCall, accessToken, showToast, addNotification]);\n\n  const updateIssue = useCallback(async (issueId: string, updates: Partial<Issue>) => {\n    console.log('?? Updating issue:', issueId, updates);\n    try {\n      const updatedIssue = await apiCall(`/api/issues/${issueId}`, {\n        method: 'PUT',\n        body: JSON.stringify(updates),\n        headers: { 'Authorization': `Bearer ${accessToken}` }\n      });\n      \n      console.log('? Issue updated successfully');\n      setIssues(prev => prev.map(issue => \n        issue.id === issueId ? updatedIssue : issue\n      ));\n      \n      showToast('success', 'Issue Updated', `${updatedIssue.key} has been updated`);\n      \n      addNotification({\n        type: 'issue_updated',\n        title: 'Issue Updated',\n        message: `You updated ${updatedIssue.key}`,\n        read: false,\n        data: updatedIssue\n      });\n    } catch (error: any) {\n      console.error('? Failed to update issue:', error.message);\n      setAuthError(error.message || 'Failed to update issue');\n      showToast('error', 'Update Failed', error.message || 'Could not update issue');\n    }\n  }, [apiCall, accessToken, showToast, addNotification]);\n\n  const addComment = useCallback(async (issueId: string, content: string) => {\n    try {\n      const comment = await apiCall(`/api/issues/${issueId}/comments`, {\n        method: 'POST',\n        body: JSON.stringify({ content }),\n        headers: { 'Authorization': `Bearer ${accessToken}` }\n      });\n      \n      setIssues(prev => prev.map(issue => \n        issue.id === issueId \n          ? { ...issue, comments: [...(issue.comments || []), comment] }\n          : issue\n      ));\n      \n      showToast('success', 'Comment Added', 'Your comment has been posted');\n    } catch (error: any) {\n      console.error('? Failed to add comment:', error.message);\n      showToast('error', 'Comment Failed', error.message || 'Could not add comment');\n    }\n  }, [apiCall, accessToken, showToast]);\n\n  // Utility functions\n  const getTypeIcon = (type: Issue['issue_type']) => {\n    switch (type) {\n      case 'STORY': return Icons.story(20);\n      case 'TASK': return Icons.task(20);\n      case 'BUG': return Icons.bug(20);\n      case 'EPIC': return Icons.flag(20);\n    }\n  };\n\n  const getPriorityColor = (priority: Issue['priority']) => {\n    switch (priority) {\n      case 'HIGHEST': return '#cd1316';\n      case 'HIGH': return '#ea2f00';\n      case 'MEDIUM': return '#ffa500';\n      case 'LOW': return '#2d8738';\n      case 'LOWEST': return '#57a55a';\n    }\n  };\n\n  const getStatusColor = (status: Issue['status']) => {\n    switch (status) {\n      case 'DONE': return '#36b37e';\n      case 'IN_PROGRESS': return '#0052cc';\n      case 'REVIEW': return '#ffa500';\n      default: return '#42526e';\n    }\n  };\n\n  const getUserById = (userId: string | null) => {\n    if (!userId) return null;\n    return users.find(u => u.id === userId);\n  };\n\n  const getIssuesByStatus = (status: Issue['status']) => {\n    return issues.filter(issue => issue.status === status);\n  };\n\n  // Drag and Drop\n  const handleDragStart = (e: React.DragEvent, issue: Issue) => {\n    e.dataTransfer.setData('issueId', issue.id);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e: React.DragEvent, newStatus: Issue['status']) => {\n    e.preventDefault();\n    const issueId = e.dataTransfer.getData('issueId');\n    if (issueId) {\n      updateIssue(issueId, { status: newStatus });\n    }\n  };\n\n  // Calculate metrics\n  const metrics = {\n    totalIssues: issues.length,\n    completedIssues: issues.filter(i => i.status === 'DONE').length,\n    inProgressIssues: issues.filter(i => i.status === 'IN_PROGRESS').length,\n    totalPoints: issues.reduce((sum, i) => sum + (i.story_points || 0), 0),\n    completedPoints: issues.filter(i => i.status === 'DONE').reduce((sum, i) => sum + (i.story_points || 0), 0),\n  };\n\n  // Render functions\n  const renderIntro = () => (\n    <div style={{\n      minHeight: '100vh',\n      background: 'linear-gradient(180deg, #020617 0%, #0b1120 100%)',\n      display: 'flex',\n      flexDirection: 'column',\n      color: '#e2e8f0'\n    }}>\n      <style>\n        {`\n          @keyframes introElevate {\n            0% { transform: translateY(60px) scale(0.9); opacity: 0; }\n            60% { transform: translateY(-8px) scale(1.04); opacity: 1; }\n            100% { transform: translateY(0) scale(1); opacity: 1; }\n          }\n          @keyframes introDrift {\n            0%, 100% { transform: translateY(-6px); }\n            50% { transform: translateY(12px); }\n          }\n          @keyframes introGlow {\n            0% { opacity: 0; }\n            20% { opacity: 0.45; }\n            60% { opacity: 0.75; }\n            100% { opacity: 0; }\n          }\n        `}\n      </style>\n      <nav style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        padding: '28px 48px 0 48px'\n      }}>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>\n          <div\n            style={{\n              width: '44px',\n              height: '44px',\n              borderRadius: '14px',\n              background: 'rgba(148, 163, 184, 0.08)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              color: '#94a3b8',\n              boxShadow: '0 18px 36px rgba(8, 11, 30, 0.45)'\n            }}\n          >\n            {Icons.menu(20)}\n          </div>\n          <div style={{ display: 'flex', alignItems: 'baseline', gap: '10px', fontWeight: 600 }}>\n            <span style={{ fontSize: '1.6rem', letterSpacing: '0.04em' }}>MissedTask</span>\n            <span style={{ fontSize: '0.95rem', opacity: 0.6 }}>by Shappe</span>\n          </div>\n        </div>\n      </nav>\n      <div\n        style={{\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          textAlign: 'center',\n          padding: '0 32px 48px 32px'\n        }}\n      >\n        <div style={{ position: 'relative', width: 'min(320px, 70vw)', marginBottom: '40px' }}>\n          <div\n            style={{\n              position: 'absolute',\n              inset: '12%',\n              background: 'radial-gradient(circle at 50% 50%, rgba(14,165,233,0.35), transparent 68%)',\n              filter: 'blur(24px)',\n              opacity: 0,\n              animation: 'introGlow 3200ms ease-in-out forwards'\n            }}\n          />\n          <div\n            style={{\n              borderRadius: '32px',\n              overflow: 'hidden',\n              boxShadow: '0 50px 120px rgba(15, 118, 110, 0.35)',\n              animation: 'introElevate 2600ms cubic-bezier(0.16, 1, 0.3, 1) forwards, introDrift 7800ms ease-in-out 2600ms infinite alternate'\n            }}\n          >\n            <img\n              src={logo}\n              alt="MissedTask elevation"\n              style={{ display: 'block', width: '100%', height: 'auto' }}\n            />\n          </div>\n        </div>\n        <div\n          style={{\n            maxWidth: '520px',\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '12px',\n            opacity: 0,\n            animation: 'introElevate 1800ms cubic-bezier(0.22, 1, 0.36, 1) 280ms forwards'\n          }}\n        >\n          <h1\n            style={{\n              fontSize: '2.6rem',\n              margin: 0,\n              fontWeight: 700,\n              letterSpacing: '0.04em'\n            }}\n          >\n            Navigate every deliverable with confidence\n          </h1>\n          <p\n            style={{\n              margin: 0,\n              fontSize: '1rem',\n              color: '#cbd5f5',\n              lineHeight: 1.6\n            }}\n          >\n            MissedTask keeps your team's commitments visible and accountable. Log in to continue where you left off.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderAuth = () => (\n    <div style={{\n      minHeight: '100vh',\n      background: 'linear-gradient(135deg, #0A1F4F 0%, #153E75 45%, #0C275F 100%)',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: '20px'\n    }}>\n      <div style={{\n        background: 'white',\n        borderRadius: '16px',\n        padding: '40px',\n        width: '100%',\n        maxWidth: '460px',\n        boxShadow: isAppElevated ? '0 38px 80px rgba(10, 31, 79, 0.25)' : '0 16px 40px rgba(10, 31, 79, 0.12)',\n        transform: isAppElevated ? 'translateY(0)' : 'translateY(22px)',\n        transition: 'transform 600ms cubic-bezier(0.22, 1, 0.36, 1), box-shadow 600ms ease'\n      }}>\n        <div style={{\n          textAlign: 'center',\n          marginBottom: '36px',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          gap: '12px'\n        }}>\n          <div style={{\n            width: '72px',\n            height: '72px',\n            borderRadius: '20px',\n            background: 'rgba(13, 40, 95, 0.08)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            boxShadow: '0 16px 30px rgba(10,31,79,0.18)'\n          }}>\n            <img\n              src={logo}\n              alt='MissedTask logo'\n              style={{ width: '60px', height: '60px', objectFit: 'contain' }}\n            />\n          </div>\n          <h1 style={{ margin: 0, fontSize: '28px', fontWeight: '700', color: '#172b4d', letterSpacing: '0.02em' }}>\n            Scope to MissedTask\n          </h1>\n          <p style={{ margin: 0, color: '#5f6e8b', fontSize: '15px' }}>\n            Plan, track, and catch every task.\n          </p>\n        </div>\n\n        {authMode === 'login' && (\n          <div>\n            <h2 style={{ margin: '0 0 24px 0', fontSize: '24px', color: '#1a1a1a' }}>\n              Welcome Back\n            </h2>\n            \n            <div style={{ marginBottom: '20px' }}>\n              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>\n                Email\n              </label>\n              <input\n                type="email"\n                value={loginForm.email}\n                onChange={(e) => {\n                  console.log('?? Email input changed:', e.target.value);\n                  setLoginForm({...loginForm, email: e.target.value});\n                }}\n                style={{\n                  width: '100%',\n                  padding: '14px 16px',\n                  border: '2px solid #e1e5e9',\n                  borderRadius: '8px',\n                  fontSize: '16px',\n                  outline: 'none'\n                }}\n                placeholder="Enter your email"\n              />\n            </div>\n\n            <div style={{ marginBottom: '24px' }}>\n              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>\n                Password\n              </label>\n              <input\n                type="password"\n                value={loginForm.password}\n                onChange={(e) => {\n                  console.log('?? Password input changed, length:', e.target.value.length);\n                  setLoginForm({...loginForm, password: e.target.value});\n                }}\n                style={{\n                  width: '100%',\n                  padding: '14px 16px',\n                  border: '2px solid #e1e5e9',\n                  borderRadius: '8px',\n                  fontSize: '16px',\n                  outline: 'none'\n                }}\n                placeholder="Enter your password"\n              />\n            </div>\n\n            {authError && (\n              <div style={{\n                background: '#fee',\n                border: '1px solid #fcc',\n                borderRadius: '8px',\n                padding: '12px',\n                marginBottom: '20px',\n                color: '#c33',\n                fontSize: '14px'\n              }}>\n                {authError}\n              </div>\n            )}\n\n            <button\n              onClick={() => {\n                console.log('?? Login button clicked');\n                login(loginForm.email, loginForm.password);\n              }}\n              disabled={isLoading || !loginForm.email || !loginForm.password}\n              style={{\n                width: '100%',\n                padding: '16px',\n                background: isLoading ? '#ccc' : 'linear-gradient(135deg, #667eea, #764ba2)',\n                color: 'white',\n                border: 'none',\n                borderRadius: '8px',\n                fontSize: '16px',\n                fontWeight: '600',\n                cursor: isLoading ? 'not-allowed' : 'pointer',\n                marginBottom: '20px'\n              }}\n            >\n              {isLoading ? 'Signing In...' : 'Sign In'}\n            </button>\n\n            <p style={{ textAlign: 'center', color: '#666', fontSize: '14px' }}>\n              Don't have an account?{' '}\n              <button\n                onClick={() => {\n                  console.log('?? Switching to signup mode');\n                  setAuthMode('signup');\n                }}\n                style={{\n                  background: 'none',\n                  border: 'none',\n                  color: '#667eea',\n                  textDecoration: 'underline',\n                  cursor: 'pointer',\n                  fontSize: '14px'\n                }}\n              >\n                Sign Up\n              </button>\n            </p>\n          </div>\n        )}\n\n        {authMode === 'signup' && (\n          <div>\n            <h2 style={{ margin: '0 0 24px 0', fontSize: '24px', color: '#1a1a1a' }}>\n              Create Account\n            </h2>\n\n            <div style={{ display: 'flex', gap: '8px', marginBottom: '16px' }}>\n              <button \n                onClick={() => setSignupMode('create_org')}\n                style={{ \n                  padding: '8px 12px', \n                  borderRadius: '6px', \n                  border: signupMode==='create_org' ? '2px solid #667eea' : '1px solid #e1e5e9', \n                  background: signupMode==='create_org' ? '#eef2ff' : 'white', \n                  cursor: 'pointer',\n                  fontSize: '12px'\n                }}\n              >\n                Create New Organization\n              </button>\n              <button \n                onClick={() => setSignupMode('join_org')}\n                style={{ \n                  padding: '8px 12px', \n                  borderRadius: '6px', \n                  border: signupMode==='join_org' ? '2px solid #667eea' : '1px solid #e1e5e9', \n                  background: signupMode==='join_org' ? '#eef2ff' : 'white', \n                  cursor: 'pointer',\n                  fontSize: '12px'\n                }}\n              >\n                Join Existing Organization\n              </button>\n            </div>\n            \n            <div style={{ marginBottom: '20px' }}>\n              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>\n                Full Name\n              </label>\n              <input\n                type="text"\n                value={signupForm.name}\n                onChange={(e) => setSignupForm({...signupForm, name: e.target.value})}\n                style={{\n                  width: '100%',\n                  padding: '14px 16px',\n                  border: '2px solid #e1e5e9',\n                  borderRadius: '8px',\n                  fontSize: '16px',\n                  outline: 'none'\n                }}\n                placeholder="John Doe"\n              />\n            </div>\n\n            {signupMode === 'create_org' && (\n              <div style={{ marginBottom: '20px' }}>\n                <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>\n                  Organization Name\n                </label>\n                <input\n                  type="text"\n                  value={signupForm.organization_name}\n                  onChange={(e) => setSignupForm({...signupForm, organization_name: e.target.value})}\n                  style={{\n                    width: '100%',\n                    padding: '14px 16px',\n                    border: '2px solid #e1e5e9',\n                    borderRadius: '8px',\n                    fontSize: '16px',\n                    outline: 'none'\n                  }}\n                  placeholder="Your Company Name"\n                />\n              </div>\n            )}\n\n            <div style={{ marginBottom: '20px' }}>\n              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>\n                Email\n              </label>\n              <input\n                type="email"\n                value={signupForm.email}\n                onChange={(e) => setSignupForm({...signupForm, email: e.target.value})}\n                style={{\n                  width: '100%',\n                  padding: '14px 16px',\n                  border: '2px solid #e1e5e9',\n                  borderRadius: '8px',\n                  fontSize: '16px',\n                  outline: 'none'\n                }}\n                placeholder="john@company.com"\n              />\n            </div>\n\n            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '24px' }}>\n              <div>\n                <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>\n                  Password\n                </label>\n                <input\n                  type="password"\n                  value={signupForm.password}\n                  onChange={(e) => setSignupForm({...signupForm, password: e.target.value})}\n                  style={{\n                    width: '100%',\n                    padding: '14px 16px',\n                    border: '2px solid #e1e5e9',\n                    borderRadius: '8px',\n                    fontSize: '16px',\n                    outline: 'none'\n                  }}\n                  placeholder="Password"\n                />\n              </div>\n              <div>\n                <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>\n                  Confirm Password\n                </label>\n                <input\n                  type="password"\n                  value={signupForm.confirmPassword}\n                  onChange={(e) => setSignupForm({...signupForm, confirmPassword: e.target.value})}\n                  style={{\n                    width: '100%',\n                    padding: '14px 16px',\n                    border: '2px solid #e1e5e9',\n                    borderRadius: '8px',\n                    fontSize: '16px',\n                    outline: 'none'\n                  }}\n                  placeholder="Confirm Password"\n                />\n              </div>\n            </div>\n\n            {authError && (\n              <div style={{\n                background: '#fee',\n                border: '1px solid #fcc',\n                borderRadius: '8px',\n                padding: '12px',\n                marginBottom: '20px',\n                color: '#c33',\n                fontSize: '14px'\n              }}>\n                {authError}\n              </div>\n            )}\n\n            <button\n              onClick={() => {\n                console.log('?? Signup button clicked');\n                signup();\n              }}\n              disabled={isLoading || !signupForm.name || !signupForm.email || !signupForm.password || (signupMode==='create_org' && !signupForm.organization_name)}\n              style={{\n                width: '100%',\n                padding: '16px',\n                background: isLoading ? '#ccc' : 'linear-gradient(135deg, #667eea, #764ba2)',\n                color: 'white',\n                border: 'none',\n                borderRadius: '8px',\n                fontSize: '16px',\n                fontWeight: '600',\n                cursor: isLoading ? 'not-allowed' : 'pointer',\n                marginBottom: '20px'\n              }}\n            >\n              {isLoading ? 'Creating Account...' : 'Create Account'}\n            </button>\n\n            <p style={{ textAlign: 'center', color: '#666', fontSize: '14px' }}>\n              Already have an account?{' '}\n              <button\n                onClick={() => setAuthMode('login')}\n                style={{\n                  background: 'none',\n                  border: 'none',\n                  color: '#667eea',\n                  textDecoration: 'underline',\n                  cursor: 'pointer',\n                  fontSize: '14px'\n                }}\n              >\n                Sign In\n              </button>\n            </p>\n          </div>\n        )}\n\n        {authMode === 'verify-otp' && (\n          <div>\n            <h2 style={{ margin: '0 0 16px 0', fontSize: '24px', color: '#1a1a1a' }}>\n              Verify Your Email\n            </h2>\n            <p style={{ margin: '0 0 24px 0', color: '#666', fontSize: '14px' }}>\n              We've sent a verification code to {otpForm.email}. Check your backend console for the OTP.\n            </p>\n            \n            <div style={{ marginBottom: '24px' }}>\n              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#333' }}>\n                Verification Code\n              </label>\n              <input\n                type="text"\n                value={otpForm.otp}\n                onChange={(e) => {\n                  console.log('?? OTP input changed:', e.target.value);\n                  setOtpForm({...otpForm, otp: e.target.value});\n                }}\n                style={{\n                  width: '100%',\n                  padding: '14px 16px',\n                  border: '2px solid #e1e5e9',\n                  borderRadius: '8px',\n                  fontSize: '20px',\n                  textAlign: 'center',\n                  letterSpacing: '4px',\n                  outline: 'none'\n                }}\n                placeholder="123456"\n                maxLength={6}\n              />\n              <p style={{ margin: '8px 0 0 0', color: '#666', fontSize: '12px' }}>\n                Check your backend console for the 6-digit OTP\n              </p>\n            </div>\n\n            {authError && (\n              <div style={{\n                background: '#fee',\n                border: '1px solid #fcc',\n                borderRadius: '8px',\n                padding: '12px',\n                marginBottom: '20px',\n                color: '#c33',\n                fontSize: '14px'\n              }}>\n                {authError}\n              </div>\n            )}\n\n            <button\n              onClick={() => {\n                console.log('?? Verify OTP button clicked');\n                verifyOTP();\n              }}\n              disabled={isLoading || !otpForm.otp}\n              style={{\n                width: '100%',\n                padding: '16px',\n                background: isLoading ? '#ccc' : 'linear-gradient(135deg, #667eea, #764ba2)',\n                color: 'white',\n                border: 'none',\n                borderRadius: '8px',\n                fontSize: '16px',\n                fontWeight: '600',\n                cursor: isLoading ? 'not-allowed' : 'pointer',\n                marginBottom: '20px'\n              }}\n            >\n              {isLoading ? 'Verifying...' : 'Verify & Continue'}\n            </button>\n\n            <div style={{ textAlign: 'center' }}>\n              <button\n                onClick={() => setAuthMode('signup')}\n                style={{\n                  background: 'none',\n                  border: 'none',\n                  color: '#667eea',\n                  textDecoration: 'underline',\n                  cursor: 'pointer',\n                  fontSize: '14px'\n                }}\n              >\n                Back to Sign Up\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderSidebar = () => {\n    const navItems = [\n      {\n        key: 'dashboard',\n        label: 'Dashboard',\n        icon: Icons.dashboard,\n        isActive: currentView === 'dashboard',\n        onClick: () => setCurrentView('dashboard')\n      },\n      {\n        key: 'board',\n        label: 'Board',\n        icon: Icons.board,\n        isActive: currentView === 'board',\n        onClick: () => setCurrentView('board')\n      }\n    ];\n\n    if (canCreateIssue) {\n      navItems.push({\n        key: 'create',\n        label: 'Create Issue',\n        icon: Icons.plusCircle,\n        isActive: showCreateModal,\n        onClick: () => openCreateIssueModal()\n      });\n    }\n\n    if (canAccessAdminPanel) {\n      navItems.push({\n        key: 'admin',\n        label: 'Admin Panel',\n        icon: Icons.userPlus,\n        isActive: currentView === 'admin',\n        onClick: () => setCurrentView('admin')\n      });\n    }\n\n    navItems.push({\n      key: 'chat',\n      label: 'Team Chat',\n      icon: Icons.chatBubble,\n      isActive: showChat,\n      onClick: () => setShowChat(true)\n    });\n\n    const onlineCount = users.filter(member => member.is_online).length;\n\n    return (\n      <aside style={{\n        width: isSidebarOpen ? '240px' : '72px',\n        transition: 'width 0.3s ease',\n        background: 'rgba(7, 23, 57, 0.95)',\n        color: 'white',\n        padding: isSidebarOpen ? '24px 16px' : '24px 8px',\n        boxSizing: 'border-box',\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '24px',\n        borderRight: '1px solid rgba(255,255,255,0.1)'\n      }}>\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: isSidebarOpen ? 'flex-start' : 'center',\n          gap: isSidebarOpen ? '12px' : '0',\n          padding: isSidebarOpen ? '4px 8px' : '0',\n          background: 'rgba(255,255,255,0.06)',\n          borderRadius: '12px',\n          color: 'rgba(255,255,255,0.85)',\n          textTransform: 'uppercase',\n          letterSpacing: '0.08em'\n        }}>\n          <span style={{\n            width: isSidebarOpen ? '34px' : '40px',\n            height: isSidebarOpen ? '34px' : '40px',\n            borderRadius: '12px',\n            background: 'rgba(255,255,255,0.12)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}>\n            {Icons.board(isSidebarOpen ? 18 : 22)}\n          </span>\n          {isSidebarOpen && (\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\n              <span style={{ fontSize: '11px', opacity: 0.65 }}>Organization</span>\n              <span style={{ fontSize: '14px', fontWeight: 600, textTransform: 'none', letterSpacing: 0 }}>\n                {organization?.name || 'Workspace'}\n              </span>\n            </div>\n          )}\n        </div>\n        <nav style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n          {navItems.map(item => (\n            <button\n              key={item.key}\n              onClick={item.onClick}\n              style={{\n                background: item.isActive ? 'rgba(88, 101, 242, 0.35)' : 'transparent',\n                border: 'none',\n                borderRadius: '10px',\n                color: 'white',\n                padding: isSidebarOpen ? '12px 14px' : '12px 8px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: isSidebarOpen ? 'flex-start' : 'center',\n                gap: isSidebarOpen ? '12px' : '0',\n                cursor: 'pointer',\n                fontSize: '14px',\n                transition: 'background 0.2s ease, transform 0.2s ease'\n              }}\n            >\n              <span style={{ display: 'flex', alignItems: 'center' }}>\n                {item.icon(isSidebarOpen ? 20 : 24)}\n              </span>\n              {isSidebarOpen && (\n                <span style={{ fontWeight: '600' }}>{item.label}</span>\n              )}\n            </button>\n          ))}\n        </nav>\n\n          <div style={{ marginTop: 'auto', display: 'flex', flexDirection: 'column', gap: '16px' }}>\n            {isSidebarOpen ? (\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n              <span style={{ fontSize: '12px', opacity: 0.7, letterSpacing: '0.04em' }}>TEAM STATUS</span>\n              <OnlineUsersIndicator users={users} />\n            </div>\n          ) : (\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              gap: '4px',\n              color: 'rgba(255,255,255,0.8)',\n              fontSize: '12px'\n            }}>\n              <div style={{\n                width: '32px',\n                height: '32px',\n                borderRadius: '50%',\n                background: 'rgba(54, 179, 126, 0.25)',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontWeight: '600'\n              }}>\n                {onlineCount}\n              </div>\n              <span>online</span>\n            </div>\n          )}\n            <button\n              onClick={logout}\n              style={{\n                background: 'rgba(255,255,255,0.08)',\n                border: '1px solid rgba(255,255,255,0.14)',\n                borderRadius: '10px',\n                padding: isSidebarOpen ? '12px 14px' : '12px',\n                color: 'white',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: isSidebarOpen ? 'flex-start' : 'center',\n                gap: isSidebarOpen ? '10px' : '0',\n                cursor: 'pointer',\n                fontSize: '14px',\n                transition: 'background 0.2s ease, border-color 0.2s ease'\n              }}\n            >\n              <span style={{ display: 'flex', alignItems: 'center' }}>\n                {Icons.logout(isSidebarOpen ? 20 : 22)}\n              </span>\n              {isSidebarOpen && (\n                <span style={{ fontWeight: 600 }}>Logout</span>\n              )}\n            </button>\n        </div>\n      </aside>\n    );\n  };\n  const renderHeader = () => {\n    const unreadCount = notifications.filter(n => !n.read).length;\n    const avatarValue = (user?.avatar || '').trim();\n    const avatarLooksLikeImage = /^https?:\/\//i.test(avatarValue) || avatarValue.startsWith('data:image') || avatarValue.startsWith('blob:');\n\n    const userInitials = (() => {\n      if (!avatarLooksLikeImage && avatarValue.length > 0 && avatarValue.length <= 3) {\n        return avatarValue.slice(0, 2).toUpperCase();\n      }\n      if (user?.name) {\n        const initials = user.name\n          .split(' ')\n          .filter(Boolean)\n          .map(part => part[0]!.toUpperCase())\n          .join('');\n        return initials.slice(0, 2) || 'AC';\n      }\n      if (user?.email) {\n        const emailInitial = user.email.trim();\n        if (emailInitial) {\n          return emailInitial[0]!.toUpperCase();\n        }\n      }\n      return 'AC';\n    })();\n\n    return (\n      <header style={{\n        height: '64px',\n        background: 'linear-gradient(135deg, #0A1F4F 0%, #153E75 100%)',\n        color: 'white',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        padding: '0 24px',\n        boxShadow: '0 2px 8px rgba(0,0,0,0.15)'\n      }}>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '18px' }}>\n          <button\n            onClick={() => setIsSidebarOpen(prev => !prev)}\n            aria-label={isSidebarOpen ? 'Collapse navigation' : 'Expand navigation'}\n            style={{\n              background: 'rgba(255,255,255,0.12)',\n              border: 'none',\n              borderRadius: '12px',\n              color: 'white',\n              width: '42px',\n              height: '42px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              cursor: 'pointer'\n            }}\n          >\n            {Icons.menu(22)}\n          </button>\n          <div style={{ display: 'flex', alignItems: 'center', gap: '14px' }}>\n            <div style={{\n              width: '48px',\n              height: '48px',\n              borderRadius: '16px',\n              background: 'rgba(255,255,255,0.14)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              padding: '4px',\n              boxShadow: '0 12px 24px rgba(0,0,0,0.2)'\n            }}>\n              <img\n                src={logo}\n                alt='MissedTask logo'\n                style={{ width: '100%', height: '100%', objectFit: 'contain' }}\n              />\n            </div>\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '2px' }}>\n              <h1 style={{ margin: 0, fontSize: '1.6rem', fontWeight: '600', letterSpacing: '0.02em' }}>MissedTask</h1>\n            </div>\n          </div>\n        </div>\n\n        <div style={{ display: 'flex', alignItems: 'center', gap: '14px' }}>\n          <div data-header-menu style={{ position: 'relative' }}>\n            <button\n              onClick={() => setShowNotificationsMenu(prev => !prev)}\n              aria-label={showNotificationsMenu ? 'Close notifications' : 'Open notifications'}\n              style={{\n                position: 'relative',\n                background: showNotificationsMenu ? 'rgba(255,255,255,0.18)' : 'rgba(255,255,255,0.12)',\n                border: 'none',\n                borderRadius: '50%',\n                color: 'white',\n                width: '44px',\n                height: '44px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                cursor: 'pointer',\n                transition: 'background 0.2s ease'\n              }}\n            >\n              {Icons.bell(20)}\n              {unreadCount > 0 && (\n                <span style={{\n                  position: 'absolute',\n                  top: '6px',\n                  right: '6px',\n                  background: '#ff5722',\n                  color: 'white',\n                  borderRadius: '50%',\n                  minWidth: '18px',\n                  height: '18px',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  fontSize: '11px',\n                  fontWeight: 600\n                }}>\n                  {unreadCount > 9 ? '9+' : unreadCount}\n                </span>\n              )}\n            </button>\n            {showNotificationsMenu && (\n              <div style={{\n                position: 'absolute',\n                top: '54px',\n                right: 0,\n                background: 'white',\n                color: '#172b4d',\n                borderRadius: '12px',\n                boxShadow: '0 12px 28px rgba(0,0,0,0.22)',\n                padding: '16px',\n                width: '320px',\n                maxHeight: '420px',\n                overflowY: 'auto',\n                zIndex: 1000\n              }}>\n                <div style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'space-between',\n                  gap: '12px',\n                  marginBottom: '12px'\n                }}>\n                  <div style={{ display: 'flex', flexDirection: 'column', gap: '2px' }}>\n                    <span style={{ fontWeight: 600 }}>Notifications</span>\n                    <span style={{ fontSize: '12px', color: '#6b778c' }}>\n                      {notifications.length || 'No'} updates\n                    </span>\n                  </div>\n                  <button\n                    onClick={() => setShowNotificationsMenu(false)}\n                    aria-label="Close notifications"\n                    style={{\n                      background: 'transparent',\n                      border: 'none',\n                      color: '#6b778c',\n                      borderRadius: '50%',\n                      width: '28px',\n                      height: '28px',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      cursor: 'pointer'\n                    }}\n                  >\n                    {Icons.close(16)}\n                  </button>\n                </div>\n                {notifications.length === 0 ? (\n                  <div style={{ fontSize: '13px', color: '#6b778c', textAlign: 'center' }}>\n                    You''re all caught up.\n                  </div>\n                ) : (\n                  notifications.slice(0, 8).map(note => {\n                    const messageText = (note.message || '').replace(/(\r\n|\n|\r)/g, ' ').replace(/\s+/g, ' ').trim();\n                    return (\n                      <div\n                        key={note.id}\n                        style={{\n                          padding: '12px',\n                          borderRadius: '10px',\n                          background: note.read ? '#f5f7fb' : '#e8f1ff',\n                          border: note.read ? '1px solid #eef1f6' : '1px solid #d6e4ff',\n                          marginBottom: '10px'\n                        }}\n                      >\n                        <div style={{ fontWeight: 600, fontSize: '14px', marginBottom: '4px' }}>{note.title}</div>\n                        <div style={{ fontSize: '13px', color: '#4d5b78', marginBottom: '6px' }}>{messageText || 'No additional details'}</div>\n                        <span style={{ fontSize: '11px', color: '#8492b1' }}>\n                          {new Date(note.timestamp).toLocaleString()}\n                        </span>\n                      </div>\n                    );\n                  })\n                )}\n              </div>\n            )}\n          </div>\n\n          <div data-header-menu style={{ position: 'relative' }}>\n            <button\n              onClick={() => setShowAccountMenu(prev => !prev)}\n              aria-label={showAccountMenu ? 'Close account menu' : 'Open account menu'}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                gap: '8px',\n                background: showAccountMenu ? 'rgba(255,255,255,0.18)' : 'rgba(255,255,255,0.12)',\n                border: 'none',\n                borderRadius: '999px',\n                color: 'white',\n                padding: '6px 12px',\n                cursor: 'pointer',\n                transition: 'background 0.2s ease'\n              }}\n            >\n              <span style={{\n                width: '32px',\n                height: '32px',\n                borderRadius: '50%',\n                background: 'rgba(255,255,255,0.18)',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontWeight: 600,\n                fontSize: '14px',\n                overflow: 'hidden'\n              }}>\n                {avatarLooksLikeImage ? (\n                  <img\n                    src={avatarValue}\n                    alt={(user?.name || 'User') + ' avatar'}\n                    style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n                  />\n                ) : (\n                  userInitials\n                )}\n              </span>\n              <span style={{ fontSize: '13px', fontWeight: 600 }}>\n                {user?.name || 'Account'}\n              </span>\n            </button>\n            {showAccountMenu && (\n              <div style={{\n                position: 'absolute',\n                top: '54px',\n                right: 0,\n                background: 'white',\n                color: '#172b4d',\n                borderRadius: '12px',\n                boxShadow: '0 12px 28px rgba(0,0,0,0.22)',\n                padding: '20px',\n                minWidth: '220px',\n                zIndex: 1000\n              }}>\n                <div style={{ marginBottom: '16px' }}>\n                  <div style={{ fontWeight: 600, fontSize: '15px' }}>{user?.name || 'Signed in'}</div>\n                  <div style={{ fontSize: '12px', color: '#6b778c', marginTop: '4px' }}>\n                    {user?.email || 'No email available'}\n                  </div>\n                  {organization?.name && (\n                    <div style={{ fontSize: '11px', color: '#94a3b8', marginTop: '8px', textTransform: 'uppercase', letterSpacing: '0.04em' }}>\n                      {organization.name}\n                    </div>\n                  )}\n                </div>\n                <button\n                  onClick={logout}\n                  style={{\n                    width: '100%',\n                    background: '#eff2f7',\n                    border: 'none',\n                    borderRadius: '10px',\n                    padding: '10px 12px',\n                    color: '#172b4d',\n                    fontWeight: 600,\n                    cursor: 'pointer'\n                  }}\n                >\n                  Logout\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </header>\n    );\n  };\n\n  const renderDashboard = () => (\n    <div style={{ padding: '32px' }}>\n      <div style={{ marginBottom: '32px' }}>\n        <h1 style={{ fontSize: '28px', fontWeight: '700', marginBottom: '8px', color: '#172b4d' }}>\n          Project Dashboard\n        </h1>\n        <p style={{ color: '#6b778c', fontSize: '16px', margin: 0 }}>\n          Welcome back! Here's your project overview.\n        </p>\n      </div>\n      \n      <div style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',\n        gap: '24px',\n        marginBottom: '32px'\n      }}>\n        {[\n          { label: 'Total Issues', value: metrics.totalIssues, color: '#0052cc', icon: Icons.list },\n          { label: 'Completed', value: metrics.completedIssues, color: '#36b37e', icon: Icons.checkCircle },\n          { label: 'In Progress', value: metrics.inProgressIssues, color: '#ffa500', icon: Icons.progress },\n          { label: 'Story Points', value: `${metrics.completedPoints}/${metrics.totalPoints}`, color: '#6554c0', icon: Icons.sparkles }\n        ].map((metric, index) => (\n          <div key={index} style={{\n            background: 'white',\n            border: '1px solid #e1e5e9',\n            borderRadius: '12px',\n            padding: '24px',\n            boxShadow: '0 2px 8px rgba(0,0,0,0.04)'\n          }}>\n            <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>\n              <span style={{ display: 'flex', alignItems: 'center', marginRight: '12px', color: metric.color }}>\n                {metric.icon(24)}\n              </span>\n              <span style={{ fontSize: '14px', color: '#6b778c', fontWeight: '600' }}>{metric.label}</span>\n            </div>\n            <div>\n              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#172b4d' }}>\n                Deadline\n              </label>\n              <input\n                type='date'\n                value={newIssue.deadline}\n                onChange={(e) => setNewIssue({...newIssue, deadline: e.target.value})}\n                style={{\n                  width: '100%',\n                  padding: '12px',\n                  border: '1px solid #dfe1e6',\n                  borderRadius: '6px',\n                  fontSize: '14px',\n                  outline: 'none'\n                }}\n                min={new Date().toISOString().split('T')[0]}\n              />\n            </div>\n            <div style={{ fontSize: '36px', fontWeight: '700', color: metric.color }}>{metric.value}</div>\n          </div>\n        ))}\n      </div>\n\n      <div style={{\n        background: 'white',\n        border: '1px solid #e1e5e9',\n        borderRadius: '12px',\n        padding: '24px',\n        boxShadow: '0 2px 8px rgba(0,0,0,0.04)'\n      }}>\n        <h3 style={{ fontSize: '18px', fontWeight: '600', marginBottom: '20px', color: '#172b4d' }}>\n          Recent Issues\n        </h3>\n        {issues.length > 0 ? (\n          <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n            {issues.slice(0, 5).map((issue) => (\n              <div \n                key={issue.id} \n                onClick={() => {\n                  setSelectedIssue(issue);\n                  setShowIssueModal(true);\n                }}\n                style={{ \n                  display: 'flex', \n                  alignItems: 'center', \n                  padding: '12px',\n                  border: '1px solid #f0f0f0',\n                  borderRadius: '8px',\n                  cursor: 'pointer',\n                  transition: 'all 0.2s'\n                }}\n              >\n                <span style={{ marginRight: '12px', fontSize: '16px' }}>{getTypeIcon(issue.issue_type)}</span>\n                <div style={{ flex: 1, minWidth: 0 }}>\n                  <div style={{ fontSize: '14px', fontWeight: '500', color: '#172b4d' }}>\n                    {issue.key}: {issue.title}\n                  </div>\n                  <div style={{ fontSize: '12px', color: '#6b778c' }}>\n                    Updated {new Date(issue.updated_at).toLocaleDateString()}\n                  </div>\n                </div>\n                <div style={{\n                  padding: '4px 8px',\n                  borderRadius: '12px',\n                  fontSize: '11px',\n                  fontWeight: '600',\n                  background: issue.status === 'DONE' ? '#e3fcef' : issue.status === 'IN_PROGRESS' ? '#deebff' : '#f4f5f7',\n                  color: getStatusColor(issue.status)\n                }}>\n                  {issue.status.replace('_', ' ')}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div style={{ textAlign: 'center', color: '#6b778c', padding: '40px' }}>\n            <div style={{ marginBottom: '16px', color: '#c3cde6', display: 'flex', justifyContent: 'center' }}>\n              {Icons.clipboard(48)}\n            </div>\n            <h4 style={{ margin: '0 0 8px 0' }}>No issues yet</h4>\n            <p style={{ margin: 0, fontSize: '14px' }}>Create your first issue to get started</p>\n            {canCreateIssue && (\n            <button\n              onClick={() => openCreateIssueModal()}\n              style={{\n                marginTop: '16px',\n                background: 'linear-gradient(135deg, #0A1F4F 0%, #153E75 100%)',\n                color: 'white',\n                border: 'none',\n                borderRadius: '6px',\n                padding: '8px 16px',\n                fontSize: '14px',\n                cursor: 'pointer'\n              }}\n            >\n              Create Issue\n            </button>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderBoard = () => (\n    <div style={{ padding: '32px' }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>\n        <div>\n          <h1 style={{ fontSize: '28px', fontWeight: '700', margin: 0, color: '#172b4d' }}>Sprint Board</h1>\n          <p style={{ color: '#6b778c', margin: '4px 0 0 0', fontSize: '16px' }}>\n            Drag and drop issues to update their status\n          </p>\n        </div>\n      </div>\n\n      <div style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(4, 1fr)',\n        gap: '20px',\n        height: 'calc(100vh - 250px)',\n        minHeight: '600px'\n      }}>\n        {[\n          { status: 'TODO' as const, title: 'To Do', color: '#42526e' },\n          { status: 'IN_PROGRESS' as const, title: 'In Progress', color: '#0052cc' },\n          { status: 'REVIEW' as const, title: 'In Review', color: '#ffa500' },\n          { status: 'DONE' as const, title: 'Done', color: '#36b37e' }\n        ].map((column) => (\n          <div\n            key={column.status}\n            style={{\n              background: '#f8f9fa',\n              borderRadius: '12px',\n              padding: '16px',\n              border: '2px dashed transparent'\n            }}\n            onDragOver={handleDragOver}\n            onDrop={(e) => handleDrop(e, column.status)}\n          >\n            <div style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              marginBottom: '16px',\n              paddingBottom: '12px',\n              borderBottom: `2px solid ${column.color}`\n            }}>\n              <h3 style={{\n                fontSize: '14px',\n                fontWeight: '700',\n                color: column.color,\n                textTransform: 'uppercase',\n                margin: 0,\n                letterSpacing: '0.5px'\n              }}>\n                {column.title}\n              </h3>\n              <div style={{\n                background: column.color,\n                color: 'white',\n                borderRadius: '12px',\n                padding: '4px 8px',\n                fontSize: '12px',\n                fontWeight: '600',\n                minWidth: '20px',\n                textAlign: 'center'\n              }}>\n                {getIssuesByStatus(column.status).length}\n              </div>\n            </div>\n\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              gap: '12px',\n              height: 'calc(100% - 60px)',\n              overflowY: 'auto'\n            }}>\n              {getIssuesByStatus(column.status).length > 0 ? (\n                getIssuesByStatus(column.status).map((issue) => (\n                  <div\n                    key={issue.id}\n                    draggable\n                    onDragStart={(e) => handleDragStart(e, issue)}\n                    onClick={() => {\n                      setSelectedIssue(issue);\n                      setShowIssueModal(true);\n                    }}\n                    style={{\n                      background: 'white',\n                      border: '1px solid #e1e5e9',\n                      borderRadius: '8px',\n                      padding: '16px',\n                      cursor: 'grab',\n                      boxShadow: '0 1px 3px rgba(0,0,0,0.04)',\n                      transition: 'all 0.2s'\n                    }}\n                  >\n                    <div style={{\n                      fontSize: '14px',\n                      fontWeight: '600',\n                      color: '#172b4d',\n                      marginBottom: '8px',\n                      lineHeight: '1.4'\n                    }}>\n                      {issue.title}\n                    </div>\n\n                    <div style={{\n                      fontSize: '12px',\n                      color: '#6b778c',\n                      marginBottom: '12px',\n                      lineHeight: '1.3'\n                    }}>\n                      {issue.description.length > 60 ? issue.description.substring(0, 60) + '...' : issue.description}\n                    </div>\n\n                    <div style={{\n                      display: 'flex',\n                      justifyContent: 'space-between',\n                      alignItems: 'center'\n                    }}>\n                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                        <span style={{ fontSize: '11px', color: '#6b778c', fontWeight: '600' }}>{issue.key}</span>\n                        <span style={{ fontSize: '14px' }}>{getTypeIcon(issue.issue_type)}</span>\n                        <div style={{\n                          width: '6px',\n                          height: '6px',\n                          borderRadius: '50%',\n                          background: getPriorityColor(issue.priority)\n                        }} />\n                        <span style={{\n                          fontSize: '10px',\n                          background: '#f4f5f7',\n                          padding: '2px 6px',\n                          borderRadius: '4px',\n                          fontWeight: '600',\n                          color: '#6b778c'\n                        }}>\n                          {issue.story_points}\n                        </span>\n                      </div>\n                      <div style={{\n                        width: '28px',\n                        height: '28px',\n                        borderRadius: '50%',\n                        background: !issue.assignee_id ? '#ccc' : 'linear-gradient(135deg, #6554c0, #9575cd)',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        fontSize: '11px',\n                        fontWeight: '600',\n                        color: 'white'\n                      }}>\n                        {issue.assignee_id ? getUserById(issue.assignee_id)?.avatar || 'UN' : 'UN'}\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  height: '200px',\n                  color: '#6b778c',\n                  fontSize: '14px'\n                }}>\n                  <div style={{ marginBottom: '8px', opacity: 0.5, display: 'flex' }}>\n                    {Icons.board(32)}\n                  </div>\n                  <div>No issues in {column.title}</div>\n                  {column.status === 'TODO' && (\n                    {canCreateIssue && (\n                    <button\n                      onClick={() => openCreateIssueModal()}\n                      style={{\n                        marginTop: '12px',\n                        background: 'transparent',\n                        border: '1px dashed #dfe1e6',\n                        borderRadius: '6px',\n                        padding: '8px 16px',\n                        fontSize: '12px',\n                        color: '#6b778c',\n                        cursor: 'pointer'\n                      }}\n                    >\n                      Create issue\n                    </button>\n                    )}\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderAdminView = () => {\n    if (!canAccessAdminPanel) {\n      return (\n        <div style={{ padding: '32px', color: '#6b778c' }}>\n          You need super admin permissions to access the admin panel.\n        </div>\n      );\n    }\n\n    if (!user || !organization) {\n      return (\n        <div style={{ padding: '32px', color: '#6b778c' }}>\n          Loading organization data...\n        </div>\n      );\n    }\n\n    return (\n      <div style={{ padding: '24px' }}>\n        <AdminPanel\n          currentUser={user}\n          organization={organization}\n          users={users}\n          issues={issues}\n          apiCall={apiCall}\n          onUserUpdate={setUsers}\n          showToast={showToast}\n        />\n      </div>\n    );\n  };\n\n  const renderCreateModal = () => (\n    showCreateModal && (\n      <div style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        background: 'rgba(0,0,0,0.5)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        zIndex: 2000\n      }}>\n        <div style={{\n          background: 'white',\n          borderRadius: '12px',\n          padding: '24px',\n          width: '500px',\n          maxHeight: '80vh',\n          overflow: 'auto'\n        }}>\n          <h2 style={{ marginBottom: '20px', color: '#172b4d' }}>Create New Issue</h2>\n          \n          <div style={{ marginBottom: '16px' }}>\n            <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#172b4d' }}>Title *</label>\n            <input\n              type="text"\n              value={newIssue.title}\n              onChange={(e) => setNewIssue({...newIssue, title: e.target.value})}\n              style={{\n                width: '100%',\n                padding: '12px',\n                border: '1px solid #dfe1e6',\n                borderRadius: '6px',\n                fontSize: '14px',\n                outline: 'none'\n              }}\n              placeholder="What needs to be done?"\n            />\n          </div>\n\n          <div style={{ marginBottom: '16px' }}>\n            <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#172b4d' }}>Description</label>\n            <textarea\n              value={newIssue.description}\n              onChange={(e) => setNewIssue({...newIssue, description: e.target.value})}\n              rows={4}\n              style={{\n                width: '100%',\n                padding: '12px',\n                border: '1px solid #dfe1e6',\n                borderRadius: '6px',\n                fontSize: '14px',\n                resize: 'vertical',\n                outline: 'none'\n              }}\n              placeholder="Describe the issue in detail..."\n            />\n          </div>\n\n          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '16px' }}>\n            <div>\n              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#172b4d' }}>Type</label>\n              <select\n                value={newIssue.issue_type}\n                onChange={(e) => setNewIssue({...newIssue, issue_type: e.target.value as Issue['issue_type']})}\n                style={{\n                  width: '100%',\n                  padding: '12px',\n                  border: '1px solid #dfe1e6',\n                  borderRadius: '6px',\n                  fontSize: '14px',\n                  outline: 'none'\n                }}\n              >\n                <option value="STORY">Story</option>\n                <option value="TASK">Task</option>\n                <option value="BUG">Bug</option>\n                <option value="EPIC">Epic</option>\n              </select>\n            </div>\n\n            <div>\n              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#172b4d' }}>Priority</label>\n              <select\n                value={newIssue.priority}\n                onChange={(e) => setNewIssue({...newIssue, priority: e.target.value as Issue['priority']})}\n                style={{\n                  width: '100%',\n                  padding: '12px',\n                  border: '1px solid #dfe1e6',\n                  borderRadius: '6px',\n                  fontSize: '14px',\n                  outline: 'none'\n                }}\n              >\n                <option value="LOWEST">Lowest</option>\n                <option value="LOW">Low</option>\n                <option value="MEDIUM">Medium</option>\n                <option value="HIGH">High</option>\n                <option value="HIGHEST">Highest</option>\n              </select>\n            </div>\n          </div>\n\n          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '16px' }}>\n            <div>\n              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#172b4d' }}>Assignee</label>\n              <select\n                value={newIssue.assignee_id || ''}\n                onChange={(e) => setNewIssue({...newIssue, assignee_id: e.target.value})}\n                style={{\n                  width: '100%',\n                  padding: '12px',\n                  border: '1px solid #dfe1e6',\n                  borderRadius: '6px',\n                  fontSize: '14px',\n                  outline: 'none'\n                }}\n              >\n                <option value="">Unassigned</option>\n                {users.filter(u => u.organization_id === user?.organization_id && u.is_active).map(u => (\n                  <option key={u.id} value={u.id}>{u.name}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#172b4d' }}>Story Points</label>\n              <input\n                type="number"\n                min="1"\n                max="21"\n                value={newIssue.story_points}\n                onChange={(e) => setNewIssue({...newIssue, story_points: parseInt(e.target.value) || 1})}\n                style={{\n                  width: '100%',\n                  padding: '12px',\n                  border: '1px solid #dfe1e6',\n                  borderRadius: '6px',\n                  fontSize: '14px',\n                  outline: 'none'\n                }}\n              />\n            </div>\n          </div>\n\n          <div style={{ marginBottom: '24px' }}>\n            <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#172b4d' }}>Labels</label>\n            <input\n              type="text"\n              value={newIssue.labels.join(', ')}\n              onChange={(e) => setNewIssue({...newIssue, labels: e.target.value.split(',').map(l => l.trim()).filter(l => l)})}\n              style={{\n                width: '100%',\n                padding: '12px',\n                border: '1px solid #dfe1e6',\n                borderRadius: '6px',\n                fontSize: '14px',\n                outline: 'none'\n              }}\n              placeholder="Comma-separated labels (e.g., frontend, api, urgent)"\n            />\n          </div>\n\n          <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '12px' }}>\n            <button\n              onClick={() => setShowCreateModal(false)}\n              style={{\n                padding: '12px 24px',\n                border: '1px solid #dfe1e6',\n                borderRadius: '6px',\n                background: 'white',\n                cursor: 'pointer',\n                fontSize: '14px'\n              }}\n            >\n              Cancel\n            </button>\n            <button\n              onClick={createIssue}\n              disabled={!newIssue.title.trim()}\n              style={{\n                padding: '12px 24px',\n                border: 'none',\n                borderRadius: '6px',\n                background: newIssue.title.trim() ? '#0052cc' : '#ccc',\n                color: 'white',\n                cursor: newIssue.title.trim() ? 'pointer' : 'not-allowed',\n                fontSize: '14px',\n                fontWeight: '600'\n              }}\n            >\n              Create Issue\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  );\n\n  const renderIssueModal = () => (\n    showIssueModal && selectedIssue && (\n      <div style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        background: 'rgba(0,0,0,0.5)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        zIndex: 2000\n      }}>\n        <div style={{\n          background: 'white',\n          borderRadius: '12px',\n          padding: '24px',\n          width: '600px',\n          maxHeight: '80vh',\n          overflow: 'auto'\n        }}>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '20px' }}>\n            <div>\n              <h2 style={{ margin: '0 0 8px 0', color: '#172b4d' }}>{selectedIssue.key}: {selectedIssue.title}</h2>\n              <div style={{ display: 'flex', alignItems: 'center', gap: '12px', marginBottom: '16px' }}>\n                <span style={{ fontSize: '16px' }}>{getTypeIcon(selectedIssue.issue_type)}</span>\n                <span style={{ fontSize: '12px', color: '#6b778c' }}>{selectedIssue.issue_type}</span>\n                <div style={{\n                  width: '8px',\n                  height: '8px',\n                  borderRadius: '50%',\n                  background: getPriorityColor(selectedIssue.priority)\n                }} />\n                <span style={{ fontSize: '12px', color: '#6b778c' }}>{selectedIssue.priority}</span>\n                <div style={{\n                  padding: '4px 8px',\n                  borderRadius: '12px',\n                  fontSize: '11px',\n                  fontWeight: '600',\n                  background: selectedIssue.status === 'DONE' ? '#e3fcef' : selectedIssue.status === 'IN_PROGRESS' ? '#deebff' : '#f4f5f7',\n                  color: getStatusColor(selectedIssue.status)\n                }}>\n                  {selectedIssue.status.replace('_', ' ')}\n                </div>\n              </div>\n            </div>\n            <button\n              onClick={() => setShowIssueModal(false)}\n              style={{\n                background: 'none',\n                border: 'none',\n                fontSize: '20px',\n                cursor: 'pointer',\n                color: '#6b778c'\n              }}\n            >\r\n          {Icons.menu(20)}\r\n        </button>\n          </div>\n\n          <div style={{ marginBottom: '20px' }}>\n            <h4 style={{ margin: '0 0 8px 0', fontSize: '14px', color: '#172b4d' }}>Description</h4>\n            <p style={{ margin: 0, color: '#6b778c', lineHeight: '1.5' }}>\n              {selectedIssue.description || 'No description provided.'}\n            </p>\n          </div>\n\n          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px', marginBottom: '20px' }}>\n            <div>\n              <h4 style={{ margin: '0 0 8px 0', fontSize: '14px', color: '#172b4d' }}>Assignee</h4>\n              <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                <div style={{\n                  width: '24px',\n                  height: '24px',\n                  borderRadius: '50%',\n                  background: selectedIssue.assignee_id ? 'linear-gradient(135deg, #6554c0, #9575cd)' : '#ccc',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  fontSize: '10px',\n                  fontWeight: '600',\n                  color: 'white'\n                }}>\n                  {selectedIssue.assignee_id ? getUserById(selectedIssue.assignee_id)?.avatar || 'UN' : 'UN'}\n                </div>\n                <span style={{ fontSize: '14px', color: '#172b4d' }}>\n                  {selectedIssue.assignee_id ? getUserById(selectedIssue.assignee_id)?.name || 'Unknown User' : 'Unassigned'}\n                </span>\n              </div>\n            </div>\n            <div>\n              <h4 style={{ margin: '0 0 8px 0', fontSize: '14px', color: '#172b4d' }}>Story Points</h4>\n              <span style={{ fontSize: '14px', color: '#172b4d' }}>{selectedIssue.story_points}</span>\n            </div>\n          </div>\n\n          {selectedIssue.labels && selectedIssue.labels.length > 0 && (\n            <div style={{ marginBottom: '20px' }}>\n              <h4 style={{ margin: '0 0 8px 0', fontSize: '14px', color: '#172b4d' }}>Labels</h4>\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '6px' }}>\n                {selectedIssue.labels.map((label, index) => (\n                  <span\n                    key={index}\n                    style={{\n                      background: '#f4f5f7',\n                      color: '#6b778c',\n                      padding: '4px 8px',\n                      borderRadius: '12px',\n                      fontSize: '11px',\n                      fontWeight: '600'\n                    }}\n                  >\n                    {label}\n                  </span>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <CommentSection\n            comments={selectedIssue.comments || []}\n            users={users}\n            onAddComment={(content) => addComment(selectedIssue.id, content)}\n            currentUserId={user?.id || ''}\n          />\n        </div>\n      </div>\n    )\n  );\n\n  // Main render logic\n  if (!isAuthenticated) {\n    if (showSplash) {\n      return renderIntro();\n    }\n\n    return (\n      <>\n        {renderAuth()}\n        <ToastContainer toasts={toasts} onRemove={removeToast} />\n      </>\n    );\n  }\n\n  return (\n    <div style={{\n      background: 'linear-gradient(180deg, #071739 0%, #0A1F4F 50%, #0C275F 100%)',\n      minHeight: '100vh',\n      transform: isAppElevated ? 'translateY(0)' : 'translateY(36px)',\n      opacity: isAppElevated ? 1 : 0,\n      transition: 'transform 700ms cubic-bezier(0.22, 1, 0.36, 1), opacity 600ms ease',\n      boxShadow: isAppElevated ? '0 40px 80px rgba(5, 17, 45, 0.35)' : '0 0 0 rgba(0,0,0,0)',\n      willChange: 'transform, opacity'\n    }}>\n\n      {renderHeader()}\n      <div style={{ display: 'flex', minHeight: 'calc(100vh - 64px)' }}>\n        {renderSidebar()}\n        <main style={{ flex: 1, overflowY: 'auto', padding: '0 0 80px 0' }}>\n          {currentView === 'dashboard' && renderDashboard()}\n          {currentView === 'board' && renderBoard()}\n          {currentView === 'admin' && renderAdminView()}\n        </main>\n      </div>\n      {renderCreateModal()}\n      {renderIssueModal()}\n      <ToastContainer toasts={toasts} onRemove={removeToast} />\n      \n      {/* Chat Component Integration */}\n      {isAuthenticated && (\n        <>\n          <button\n            onClick={() => setShowChat(prev => !prev)}\n            aria-label={showChat ? 'Close chat' : 'Open chat'}\n            style={{\n              position: 'fixed',\n              bottom: '24px',\n              right: '24px',\n              width: '64px',\n              height: '64px',\n              borderRadius: '50%',\n              border: 'none',\n              background: showChat ? '#5865f2' : '#0052cc',\n              color: 'white',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              cursor: 'pointer',\n              boxShadow: '0 12px 30px rgba(0,0,0,0.25)',\n              fontSize: showChat ? '28px' : '24px',\n              transition: 'all 0.2s ease',\n              zIndex: 1100\n            }}\n          >\n            {showChat ? Icons.close(26) : Icons.chatBubble(28)}\n          </button>\n          <Chat \n            visible={showChat}\n            onClose={() => setShowChat(false)}\n            apiCall={apiCall}\n            wsRef={wsRef}\n            currentUser={user}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;